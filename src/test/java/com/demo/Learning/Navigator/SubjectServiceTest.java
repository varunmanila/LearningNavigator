package com.demo.Learning.Navigator;

import com.demo.Learning.Navigator.Entity.*;
import com.demo.Learning.Navigator.Repocitory.ExamRepocitory;
import com.demo.Learning.Navigator.Repocitory.StudentsRepocitory;
import com.demo.Learning.Navigator.Repocitory.SubjectRepocitory;
import com.demo.Learning.Navigator.Service.ExamsService;
import com.demo.Learning.Navigator.Service.StudentsService;
import com.demo.Learning.Navigator.Service.SubjectsService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
public class SubjectServiceTest {

    @Autowired
    private SubjectRepocitory subjectRepository;

    @Autowired
    private SubjectsService subjectsService;

    @Autowired
    ExamsService examsService;

    @Autowired
    private StudentsRepocitory studentRepository;
    @Autowired
    private StudentsService studentsService;

    @Autowired
    private ExamRepocitory examRepository;

    @BeforeEach
    void setup() {
        MockitoAnnotations.openMocks(this);
        subjectRepository.deleteAll();
        studentRepository.deleteAll();
        examRepository.deleteAll();
    }

    @Test
    void testCreateSubject() {
        // Arrange: Create a SubjectDTO
        SubjectDTO subjectDTO = new SubjectDTO();
        subjectDTO.setName("Politics");
        subjectDTO.setStudentIds(new ArrayList<>());
        subjectDTO.setExamIds(new ArrayList<>());

        // Act: Call createSUbject method
        Subject createdSubject = subjectsService.createSUbject(subjectDTO);

        // Assert: Check if the subject is saved and ID is generated
        assertNotNull(createdSubject);
        assertEquals("Politics", createdSubject.getName());
        assertNotNull(createdSubject.getId());  // The ID should be generated by the database
    }

    @Test
    void testCreateStudent() {
        StudentDTO studentDTO = new StudentDTO();
        studentDTO.setName("Ram");
        List<Integer> examId =new ArrayList<>();
        studentDTO.setExamId(examId);
        studentDTO.setSubjectId(Arrays.asList(1));
        Student student = new Student();
        student.setName("Ram");
//        Mockito.when(studentRepository.save(any(Student.class))).thenReturn(student);

        Student savedStudent = studentsService.saveStudent(studentDTO);

        assertNotNull(savedStudent);
        student=savedStudent;
        assertEquals("Ram", savedStudent.getName());
    }
    @Test
    void testCreateExam() {
        // Create a test student and save
        Student student = new Student();
        student.setId(1);  // Mock the student with ID 1

        // Create and save the subject
        SubjectDTO subjectDTO = new SubjectDTO();
        subjectDTO.setName("Politics");
        subjectDTO.setStudentIds(new ArrayList<>());
        subjectDTO.setExamIds(new ArrayList<>());

        // Act: Call createSUbject method
        Subject createdSubject = subjectsService.createSUbject(subjectDTO);


        // Prepare and save the exam
        ExamDTO examDTO = new ExamDTO();
        examDTO.setSubjectId(createdSubject.getId()); // Set subject ID
        examDTO.setStudentIds(Arrays.asList(1)); // Set student ID

        Exam savedExam = new Exam();
        savedExam.setId(1); // Mock saved exam with ID


        Exam result = examsService.creatExam(examDTO);

        // Assertions
        assertNotNull(result);
        assertEquals(createdSubject.getName(), result.getSubject().getName());
    }

}
